[gapps_save_domains]
definition = metasearch source=gapps:* index=* | rex field=source "gapps:(?<domain>.*)" | inputlookup gapps_domains append=t | stats count by domain | fields - count | outputlookup gapps_domains

[gapps_load_domains]
definition = metadata type=sources |search source=gapps:* | eval domain = mvindex(split(source,":"),-1) | fields domain

[gapps_usage(1)]
args = type
definition = eventtype=gapps_usage_$type$ | rename parameters{}.* as param_* | `gapps_evals`

[gapps_gmail_usage(1)]
args = d
definition = domain=$d$ `gapps_usage("customer")` | dedup date domain sortby -_indextime | fields domain entity* param_gmail_*

[gapps_accounts_usage(1)]
args = d
definition = domain=$d$ `gapps_usage("customer")`  | dedup date domain sortby -_indextime | fields domain entity* param_accounts_*

[gapps_evals]
definition = eval param_accounts_drive_used_quota_in_percentage = round(param_accounts_drive_used_quota_in_mb / param_accounts_total_quota_in_mb * 100, 0) | eval param_accounts_gmail_used_quota_in_percentage = round(param_accounts_gmail_used_quota_in_mb / param_accounts_total_quota_in_mb * 100, 0) | eval param_accounts_gplus_photos_used_quota_in_percentage = round(param_accounts_gplus_photos_used_quota_in_mb / param_accounts_total_quota_in_mb * 100, 0)

[gapps_aa_contingency(1)]
args = domain
definition = eventtype=googleapps  source="gapps:$domain$*" | eval domain = substr(source, 7)|contingency eventType name usetotal=f

[gapps_aa_spath]
definition = spath path=items{}.events{}.name output=eventName | spath path=items{}.events{}.parameters{}.name output=paramName|spath path=items{}.events{}.parameters{}.value output=paramValue

[gapps_aa(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$|eval domain=substr(source,7)|`gapps_aa_spath`

[gapps_cntgcy_all_aa(1)]
args = domain
definition = `gapps_aa($domain$)`| rename events{}.name as eventName events{}.type as eventType |contingency eventType eventName usetotal=f

[gapps_aa_detail]
definition = rename items{}.events{}.parameters{}.name AS paramName |rename items{}.events{}.parameters{}.value AS paramValue |eval x=mvzip(paramName, paramValue)|mvexpand x|eval x=split(x,",")|eval paramName = mvindex(x,0)|eval paramValue=mvindex(x,1)

[gapps_severe(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ tag::eventtype=severe|`gapps_aa_spath`| `gapps_aa_detail`|eval changes=paramName.":".paramValue| stats values(changes) as "Changes" by eventType, eventName, email|rename eventType as "Event Type"|rename eventName AS "Event Name"

[gapps_high(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ tag::eventtype=high |`gapps_aa_spath`| `gapps_aa_detail`| eval changes=paramName.":".paramValue|stats values(changes) as "Changes" by eventType, eventName, email|rename eventType as "Event Type"|rename eventName AS "Event Name"

[gapps_medium(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ tag::eventtype=medium|`gapps_aa_spath`|stats dc(paramValue) as "Distinct Parameter Values" by eventType, eventName, email, paramName

[gapps_low(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ tag::eventtype=low |`gapps_aa_spath`|stats dc(paramValue) as "Distinct Parameter Values" by eventType, eventName, email, paramName

[gapps_aa_tag_percent(2)]
args = domain, tagname
definition = eventtype=googleapps  source=gapps:$domain$ | rename tag::eventtype AS Tag | stats count by Tag| search Tag=severe OR Tag=high OR Tag=medium OR Tag=low|eventstats sum(count) as total|fillnull value=0 count|eval percent = count / total * 100 | where match(Tag,"$tagname$")|fields percent

[gapps_domain_info(1)]
args = domain
definition = search earliest=-24h@h eventtype=googleapps sourcetype=gapps:info source=gapps:$domain$ |eval percent_users = current_number_users / maximum_number_users * 100| stats latest(*) as * | fields - punct source sourcetype splunk_server timestamp linecount index host

[gapps_dsk(1)]
args = domain
definition = eventtype=googleapps sourcetype="gapps:report:disk_space" source=gapps:$domain$

[gapps_eml_peruse_sub(1)]
args = domain
definition = eval pa = num_accounts_accessed / num_accounts *100|eval pw=web_mail_count/num_accounts*100|eval pp=pop_count/num_accounts*100|bucket _time span=1d|stats avg(pa) as s1 avg(pw) as s2 avg(pp) as s3 by domain,_time|eval s0 = "pa pw pp"|makemv s0|mvexpand s0|eval yval=case(s0=="pa",s1,s0=="pw",s2,s0=="pp",s3) |eval lt=case(s0=="pa","Accounts Accessed",s0=="pw","Web Mail Accessed",s0=="pp","POP Accessed")|eval series=lt+" : "+domain|xyseries _time,series,yval grouped=true

[gapps_eml_peruse(2)]
args = domain, timespan
definition = `load_gapps("email_clients","$domain$",f)`|eval pa = num_accounts_accessed / num_accounts *100|eval pw=web_mail_count/num_accounts*100|eval pp=pop_count/num_accounts*100|bucket _time span=$timespan$|stats avg(pa) as s1 avg(pw) as s2 avg(pp) as s3 by domain,_time|eval s0 = "pa pw pp"|makemv s0|mvexpand s0|eval yval=case(s0=="pa",s1,s0=="pw",s2,s0=="pp",s3) |eval lt=case(s0=="pa","Accounts Accessed",s0=="pw","Web Mail Accessed",s0=="pp","POP Accessed")|eval series=lt+" : "+domain|xyseries _time,series,yval grouped=true

[gapps_act_all_sub]
definition = bucket _time span=1w|stats avg(count_*_day_actives) as a_* avg(count_*_day_idle) as i_* by domain,_time|eval s0="1da 14da 30da 7da 30di 60di 90di"|makemv s0|mvexpand s0|eval yval=case(s0=="1da",a_1,s0=="14da",a_14,s0=="30da",a_30,s0=="7da",a_7,s0=="30di",i_30,s0=="60di",i_60,s0=="90di",i_90)|eval series = s0+" : "+domain|xyseries _time,series,yval grouped=true

[gapps_aa_top_ips(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$|lookup gapps_allowed_ips gapps_ip as ipAddress | where is_allowed = "true" | top ipAddress

[gapps_aa_top_email(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$|lookup gapps_allowed_admins gapps_admin_email AS actor.email | where is_admin = "true" |top email

[gapps_aa_top_all_email(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$| top email

[gapps_aa_top_all_ips(1)]
args = domain
definition = eventtype=googleapps source=gapps:$domain$ | top ipAddress


[gapps_load_allowed_admins]
definition = inputlookup gapps_allowed_admins | rename gapps_domain AS Domain gapps_admin_email as Admin

[gapps_load_allowed_ips]
definition = inputlookup gapps_allowed_ips

[gapps_aa_flagged_admin_events(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ [|inputlookup gapps_allowed_admins append=f|search gapps_domain="$domain$"|fields gapps_admin_email|format "NOT (" "(" "" ")" "OR" ")"]|rename gapps_admin_email AS email | `gapps_aa_spath`|stats count(paramValue) as "Parameter Values" by email, ipAddress, eventType, eventName, paramName

[gapps_aa_flagged_ips(1)]
args = domain
definition = eventtype=googleapps  source=gapps:$domain$ [|inputlookup gapps_allowed_ips append=f|search gapps_domain="$domain$"|fields gapps_ip|rename gapps_ip AS ipAddress|format "NOT (" "(" "" ")" "OR" ")"]|`gapps_aa_spath`|stats count(paramValue) as "Parameter Values" by email, ipAddress, eventType, eventName, paramName

[gapps_accounts_over_quota(2)]
args = domain, percent
definition = `load_gapps("accounts","$domain$",f)`|eval usage_in_mb = usage_in_bytes /1024/1024|eval perquota = floor(usage_in_mb/quota_in_mb * 100)| where perquota > $percent$|fields given_name surname  perquota account_name

[gapps_accounts_near_quota(1)]
args = percent
definition = eval usage_in_mb = usage_in_bytes /1024/1024|eval perquota = floor(usage_in_mb/quota_in_mb * 100)| where perquota > $percent$|eval namekey = given_name." ".surname." (".account_name.")" |fields namekey perquota|rename perquota as "Percent of Quota"

[google_mc_health_check_api]
definition = eventtype = googleapps_error | `gapps_mc_recent(3)`

[gapps_mc_health_check_server_not_found]
definition = eventtype=googleapps sourcetype=GSuiteForSplunk:error errors{}.exception_type=ServerNotFoundError | `gapps_mc_recent(3)`

[gapps_mc_recent(1)]
args = sev
definition = eval is_recent = now() - (3600 * 24 * 5), is_recent = if(_time > is_recent,"true", "false")| search is_recent="true"|rename errors{}.msg AS msg| stats count AS total_failures values(is_recent) as ir values(_time) as time by host msg| eval severity_level = $sev$| rename host AS instance msg AS message| fields instance total_failures message severity_level

[gapps_mc_health_check_bad_credentials]
definition = eventtype=googleapps sourcetype=GSuiteForSplunk:error  load_credentials | `gapps_mc_recent(3)`

[ga_ss_outputlookup(1)]
args = gassll
definition = fields - title | outputlookup $gassll$.csv

[gapps_customer_usage(2)]
definition = domain="$domain$" eventtype=gapps_usage_customer | rename "parameters{}.*" as "param_*" | stats latest(param_*) as * by domain date |eval domain=domain."::".date |untable domain key value |eval t = split(domain,"::"),domain=mvindex(t,0),date=mvindex(t,1)| rex field=key "(?<s1>[\w_]+)_num.*"| eval s2 = mvindex(split(key,"_"),0), service = coalesce(s1, s2) | where not in(service, "intValue", "name", "msgValue{}.client", "msgValue{}.num") | fields - s1 s2 | search service = "$service$" | eval _time = strptime(date,"%Y-%m-%d") | fields _time domain service key value | eval gsuite_name= replace(key,"$service$_","") | lookup gsuite_descriptions name AS gsuite_name service OUTPUT description
args = domain, service

[gapps_customer_usage_services]
definition = eventtype=gapps_usage_customer | rename "parameters{}.*" as "param_*" | stats latest(param_*) as * by domain | untable domain key value | rex field=key "(?<s1>[\w_]+)_num.*"| eval s2 = mvindex(split(key,"_"),0), service = coalesce(s1, s2) | where not in(service, "intValue", "name", "msgValue{}.client", "msgValue{}.num") | fields - s1 s2 | stats count by service |fields service